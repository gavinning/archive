<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://stage.vip</id>
    <title>F4</title>
    <updated>2021-10-19T03:31:06.026Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://stage.vip"/>
    <link rel="self" href="https://stage.vip/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://stage.vip/images/avatar.png</logo>
    <icon>https://stage.vip/favicon.ico</icon>
    <rights>All rights reserved 2021, F4</rights>
    <entry>
        <title type="html"><![CDATA[上线安全检查todo]]></title>
        <id>https://stage.vip/post/shang-xian-an-quan-jian-cha-todo/</id>
        <link href="https://stage.vip/post/shang-xian-an-quan-jian-cha-todo/">
        </link>
        <updated>2021-09-16T06:45:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="mysql">Mysql</h3>
<ul>
<li>事务配置</li>
<li>索引检查</li>
<li>安全检查</li>
</ul>
<h3 id="弹性集群">弹性集群</h3>
<ul>
<li>日志配置</li>
<li>伸缩配置</li>
</ul>
<h3 id="后台配置">后台配置</h3>
<ul>
<li>权限检查</li>
<li>安全配置</li>
<li>防御策略</li>
<li></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql事务]]></title>
        <id>https://stage.vip/post/mysql-shi-wu/</id>
        <link href="https://stage.vip/post/mysql-shi-wu/">
        </link>
        <updated>2021-09-16T06:40:46.000Z</updated>
        <content type="html"><![CDATA[<p>1.事务级别</p>
<pre><code class="language-sh">事务的隔离级别分为：
    未提交读(read uncommitted)
    已提交读(read committed)
    可重复读(repeatable read)
    串行化(serializable)

未提交读
A事务已执行，但未提交；B事务查询到A事务的更新后数据；A事务回滚；---出现脏数据

已提交读
A事务执行更新；B事务查询；A事务又执行更新；B事务再次查询时，前后两次数据不一致；---不可重复读

可重复读
A事务无论执行多少次，只要不提交，B事务查询值都不变；B事务仅查询B事务开始时那一瞬间的数据快照；
</code></pre>
<p>2.设置事务级别</p>
<pre><code class="language-sh">set session transaction isolation level read uncommitted;

set session transaction isolation level read committed;

set session transaction isolation level repeatable read;

set session transaction isolation level serializable;
</code></pre>
<p>3.查询事务级别</p>
<pre><code class="language-mysql">select @@tx_isolation;

select @@transaction_isolation;

show variables like 'transaction_isolation';
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://stage.vip/post-images/1631774520432.png" alt="" loading="lazy"></figure>
<p><a href="https://jingyan.baidu.com/article/f25ef254891845482c1b8215.html">参考文档</a><br>
<a href="https://www.cnblogs.com/huasky/p/11190086.html">参考文档</a><br>
<a href="https://www.cnblogs.com/lxmajs/p/10277901.html">参考文档</a><br>
<a href="http://www.zsythink.net/archives/1233/">参考文档</a></p>
<h3 id="sequelize-执行事务">Sequelize 执行事务</h3>
<p><a href="https://segmentfault.com/a/1190000011583945">参考文档</a><br>
<a href="https://blog.csdn.net/qq_42112846/article/details/83217130">参考文档</a><br>
<a href="https://blog.csdn.net/weixin_33721344/article/details/91412312">参考文档</a><br>
<a href="https://github.com/demopark/sequelize-docs-Zh-CN">参考文档</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CENTOS7常规初始化]]></title>
        <id>https://stage.vip/post/centos7-init/</id>
        <link href="https://stage.vip/post/centos7-init/">
        </link>
        <updated>2020-03-13T03:48:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="更新系统">更新系统</h3>
<pre><code class="language-sh"># 更换系统源
cd /etc/yum.repos.d
mv CentOS-Base.repo CentOS-Base.repo.old
curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo

yum clean all
yum makecache
yum update -y

# 修改 hostname
hostnamectl set-hostname yourhostname
</code></pre>
<h3 id="常规环境配置">常规环境配置</h3>
<pre><code class="language-sh">yum install zsh git lrzsz unzip tree -y
</code></pre>
<h4 id="oh-my-zsh">oh-my-zsh</h4>
<pre><code class="language-sh"># via curl
sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;

# via wget
sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;

# oh-my-zsh 推荐使用主题 pygmalion
# sed -i '11s/|/ /' ~/.oh-my-zsh/themes/pygmalion.zsh-theme
# sed -i '12s/⇒/➜/' ~/.oh-my-zsh/themes/pygmalion.zsh-theme

sed -i '11s/ZSH_THEME=&quot;robbyrussell&quot;/ZSH_THEME=&quot;pygmalion&quot;/' ~/.zshrc
source ~/.zshrc
</code></pre>
<h4 id="oh-my-zsh-from-gitee">oh-my-zsh -- from gitee</h4>
<pre><code class="language-sh">git clone https://gitee.com/mirrors/oh-my-zsh.git ~/.oh-my-zsh
cp ~/.zshrc ~/.zshrc.orig
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
chsh -s $(which zsh)
</code></pre>
<h4 id="nodejs">nodejs</h4>
<pre><code class="language-sh">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
nvm install 14.17.6

# 原生安装
mkdir -p /usr/local/lib/pkg &amp;&amp; cd /usr/local/lib/pkg
wget https://nodejs.org/dist/v14.17.6/node-v14.17.6-linux-x64.tar.xz
xz -d node-v14.17.6-linux-x64.tar.xz
tar xf node-v14.17.6-linux-x64.tar
mv node-v14.17.6-linux-x64 ../node

cd /usr/local/bin
ln -s ../lib/node/bin/npm npm
ln -s ../lib/node/bin/npx npx
ln -s ../lib/node/bin/node node
</code></pre>
<h4 id="nginx">nginx</h4>
<pre><code class="language-sh">yum info nginx
yum install nginx -y

nginx -t

systemctl status nginx
systemctl start nginx

# nginx default work dir: /usr/share/nginx/html
</code></pre>
<h3 id="常见问题">常见问题</h3>
<pre><code class="language-sh"># vim异常报错
_arguments:451: _vim_files: function definition file not found

# 解决方法
rm ~/.zcompdump*
exec zsh
</code></pre>
<p>make: g++: Command not found</p>
<pre><code class="language-sh">yum install gcc-c++
</code></pre>
<p>SSH登录断线时间：服务端修改 <code>etc/ssh/sshd_config</code></p>
<pre><code class="language-sh"># server每隔60秒发送一次请求给client，然后client响应，从而保持连接
ClientAliveInterval 60 

# server发出请求后，客户端没有响应得次数达到3，就自动断开连接，正常情况下，client不会不响应
ClientAliveCountMax 15 
</code></pre>
<p>生成sshkey</p>
<pre><code class="language-sh">ssh-keygen -t rsa -b 2048 -C &quot;&lt;comment&gt;&quot;
</code></pre>
<p>配置自定义指定sshkey <code>~/.ssh/config</code></p>
<pre><code class="language-sh">Host gitlab.com
    hostname gitlab.com
    User git
    IdentityFile ~/.ssh/deploy
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿里云监控Grafana插件安装配置]]></title>
        <id>https://stage.vip/post/aliyun-grafana/</id>
        <link href="https://stage.vip/post/aliyun-grafana/">
        </link>
        <updated>2020-03-12T11:27:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="准备工作">准备工作</h3>
<pre><code class="language-sh"># 进入docker主机 下载阿里云插件备用
git clone https://github.com/aliyun/aliyun-cms-grafana.git

# 查看容器id
docker ps

# 复制阿里云监控插件到grafana容器内
docker cp aliyun-cms-grafana e3daced9bdcb:/var/lib/grafana/plugins/

# 进入容器修改权限
docker exec -u root -it grafana bash
chown -R grafana:grafana aliyun-cms-grafana/

# 重启容器
docker restart grafana

# 进入grafana面板，添加数据源
# 选择刚添加的阿里云监控插件：【CMS Grafana Service】
# 配置阿里云监控插件数据源
</code></pre>
<h3 id="ak需要base64加密">AK需要BASE64加密</h3>
<pre><code class="language-js">function toBase64(str) {
    const ret = Buffer.from(str).toString('base64')
    console.log(ret)
    return ret
}

toBase64(AK)
toBase64(AS)
</code></pre>
<br />
<h3 id="参考文档">参考文档</h3>
<p><a href="https://www.alibabacloud.com/help/zh/doc-detail/109434.htm">阿里云参考文档</a><br>
<a href="https://help.aliyun.com/document_detail/109434.html">阿里云参考文档</a><br>
<a href="https://help.aliyun.com/document_detail/28616.html?spm=a2c4g.11186623.2.10.35cf3646Pw0jFd#section-xf3-lbv-zdb">阿里云云监控地址</a></p>
<h3 id="阿里云监控面板配置">阿里云监控面板配置</h3>
<p><a href="https://help.aliyun.com/document_detail/28619.html?spm=a2c4g.11186623.2.21.41563646HR21Y5#title-mwp-ec2-2c6">阿里云各产品接入Grafana参考文档</a></p>
]]></content>
    </entry>
</feed>